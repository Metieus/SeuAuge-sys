import React, { useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Zap, 
  CheckCircle, 
  Circle, 
  Plus, 
  Calendar, 
  Flame, 
  Target,
  Clock,
  Gift,
  Trophy,
  Star
} from 'lucide-react';
import { format, isToday, differenceInHours } from 'date-fns';
import { ptBR } from 'date-fns/locale';

interface DailyChallenge {
  id: string;
  title: string;
  description: string;
  icon: string;
  difficulty: 'easy' | 'medium' | 'hard';
  points: number;
  xpReward: number;
  category: 'fitness' | 'nutrition' | 'mindfulness' | 'learning';
  timeLimit: number; // em horas
  progress: number;
  target: number;
  completed: boolean;
  completedAt?: Date;
  autoGenerated: boolean;
}

interface DailyChallengesProps {
  challenges: DailyChallenge[];
  onCompleteChallenge: (challengeId: string) => void;
  onProgressUpdate: (challengeId: string, increment: number) => void;
  currentStreak: number;
  className?: string;
}

const DailyChallenges: React.FC<DailyChallengesProps> = ({
  challenges,
  onCompleteChallenge,
  onProgressUpdate,
  currentStreak,
  className = ''
}) => {
  // Gerar desafios automáticos se necessário
  const autoGeneratedChallenges: DailyChallenge[] = useMemo(() => {
    const today = new Date();
    const baseId = format(today, 'yyyy-MM-dd');
    
    return [
      {
        id: `daily-workout-${baseId}`,
        title: 'Treino Diário',
        description: 'Complete pelo menos 20 minutos de exercício',
        icon: '🏃‍♀️',
        difficulty: 'easy' as const,
        points: 25,
        xpReward: 50,
        category: 'fitness' as const,
        timeLimit: 24,
        progress: 0,
        target: 20,
        completed: false,
        autoGenerated: true
      },
      {
        id: `hydration-${baseId}`,
        title: 'Hidratação',
        description: 'Beba pelo menos 8 copos de água',
        icon: '💧',
        difficulty: 'easy' as const,
        points: 15,
        xpReward: 30,
        category: 'nutrition' as const,
        timeLimit: 24,
        progress: 0,
        target: 8,
        completed: false,
        autoGenerated: true
      },
      {
        id: `mindful-moment-${baseId}`,
        title: 'Momento Mindful',
        description: 'Pratique 5 minutos de respiração consciente',
        icon: '🧘‍♀️',
        difficulty: 'medium' as const,
        points: 20,
        xpReward: 40,
        category: 'mindfulness' as const,
        timeLimit: 24,
        progress: 0,
        target: 5,
        completed: false,
        autoGenerated: true
      },
      {
        id: `learning-video-${baseId}`,
        title: 'Aprendizado Diário',
        description: 'Assista a um vídeo educativo',
        icon: '📚',
        difficulty: 'easy' as const,
        points: 10,
        xpReward: 25,
        category: 'learning' as const,
        timeLimit: 24,
        progress: 0,
        target: 1,
        completed: false,
        autoGenerated: true
      }
    ];
  }, []);

  // Combinar desafios fornecidos com auto-gerados
  const allChallenges = useMemo(() => {
    const providedIds = new Set(challenges.map(c => c.id));
    const filteredAutoGenerated = autoGeneratedChallenges.filter(c => !providedIds.has(c.id));
    return [...challenges, ...filteredAutoGenerated];
  }, [challenges, autoGeneratedChallenges]);

  // Calcular tempo restante
  const getTimeRemaining = (challenge: DailyChallenge) => {
    const now = new Date();
    const endOfDay = new Date(now);
    endOfDay.setHours(23, 59, 59, 999);
    
    const hoursRemaining = differenceInHours(endOfDay, now);
    return Math.max(0, hoursRemaining);
  };

  // Obter cor por dificuldade
  const getDifficultyColor = (difficulty: DailyChallenge['difficulty']) => {
    switch (difficulty) {
      case 'easy': return 'from-green-500 to-emerald-500';
      case 'medium': return 'from-yellow-500 to-orange-500';
      case 'hard': return 'from-red-500 to-pink-500';
      default: return 'from-slate-500 to-slate-600';
    }
  };

  // Obter cor por categoria
  const getCategoryColor = (category: DailyChallenge['category']) => {
    switch (category) {
      case 'fitness': return 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300';
      case 'nutrition': return 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300';
      case 'mindfulness': return 'bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300';
      case 'learning': return 'bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300';
      default: return 'bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300';
    }
  };

  const completedCount = allChallenges.filter(c => c.completed).length;
  const totalPossiblePoints = allChallenges.reduce((sum, c) => sum + c.points, 0);
  const earnedPoints = allChallenges.filter(c => c.completed).reduce((sum, c) => sum + c.points, 0);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={`bg-white dark:bg-slate-800 rounded-xl p-6 border border-slate-200 dark:border-slate-700 ${className}`}
    >
      {/* Header com estatísticas */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <div className="w-10 h-10 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-lg flex items-center justify-center">
            <Zap className="w-5 h-5 text-white" />
          </div>
          <div>
            <h3 className="text-lg font-bold text-slate-900 dark:text-white">
              Desafios Diários
            </h3>
            <p className="text-sm text-slate-600 dark:text-slate-400">
              {format(new Date(), "EEEE, d 'de' MMMM", { locale: ptBR })}
            </p>
          </div>
        </div>
        
        <div className="flex items-center space-x-4">
          {/* Progresso geral */}
          <div className="text-center">
            <div className="text-xl font-bold text-slate-900 dark:text-white">
              {completedCount}/{allChallenges.length}
            </div>
            <div className="text-xs text-slate-500 dark:text-slate-400">
              Completos
            </div>
          </div>
          
          {/* Pontos do dia */}
          <div className="text-center">
            <div className="text-xl font-bold text-yellow-600 dark:text-yellow-400">
              {earnedPoints}
            </div>
            <div className="text-xs text-slate-500 dark:text-slate-400">
              Pontos
            </div>
          </div>
          
          {/* Sequência atual */}
          <div className="text-center">
            <div className="text-xl font-bold text-orange-600 dark:text-orange-400 flex items-center">
              <Flame className="w-5 h-5 mr-1" />
              {currentStreak}
            </div>
            <div className="text-xs text-slate-500 dark:text-slate-400">
              Sequência
            </div>
          </div>
        </div>
      </div>

      {/* Barra de progresso geral */}
      <div className="mb-6">
        <div className="flex justify-between text-sm text-slate-600 dark:text-slate-400 mb-2">
          <span>Progresso Diário</span>
          <span>{Math.round((completedCount / allChallenges.length) * 100)}%</span>
        </div>
        <div className="w-full bg-slate-200 dark:bg-slate-700 rounded-full h-3">
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${(completedCount / allChallenges.length) * 100}%` }}
            transition={{ duration: 0.8, ease: "easeOut" }}
            className="bg-gradient-to-r from-yellow-500 to-orange-500 h-3 rounded-full"
          />
        </div>
        {completedCount === allChallenges.length && (
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            className="mt-3 p-3 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-lg border border-green-200 dark:border-green-800"
          >
            <div className="flex items-center space-x-2 text-green-700 dark:text-green-300">
              <Trophy className="w-5 h-5" />
              <span className="font-medium">🎉 Todos os desafios completos! Dia perfeito!</span>
            </div>
          </motion.div>
        )}
      </div>

      {/* Lista de desafios */}
      <div className="space-y-4">
        <AnimatePresence>
          {allChallenges.map((challenge, index) => {
            const progressPercentage = (challenge.progress / challenge.target) * 100;
            const timeRemaining = getTimeRemaining(challenge);
            
            return (
              <motion.div
                key={challenge.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ delay: index * 0.1 }}
                className={`p-4 rounded-xl border-2 transition-all duration-200 ${
                  challenge.completed
                    ? "bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800"
                    : "bg-slate-50 dark:bg-slate-700/30 border-slate-200 dark:border-slate-600/50 hover:border-slate-300 dark:hover:border-slate-500"
                }`}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-2">
                      <span className="text-2xl">{challenge.icon}</span>
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-1">
                          <h4 className="font-semibold text-slate-900 dark:text-white">
                            {challenge.title}
                          </h4>
                          <span className={`text-xs px-2 py-1 rounded-full ${getCategoryColor(challenge.category)}`}>
                            {challenge.category}
                          </span>
                          <div className={`w-2 h-2 rounded-full bg-gradient-to-r ${getDifficultyColor(challenge.difficulty)}`} />
                        </div>
                        <p className="text-sm text-slate-600 dark:text-slate-400">
                          {challenge.description}
                        </p>
                      </div>
                    </div>

                    {/* Progresso */}
                    {!challenge.completed && challenge.target > 1 && (
                      <div className="mb-3">
                        <div className="flex justify-between text-xs text-slate-600 dark:text-slate-400 mb-1">
                          <span>Progresso: {challenge.progress}/{challenge.target}</span>
                          <span>{Math.round(progressPercentage)}%</span>
                        </div>
                        <div className="w-full bg-slate-200 dark:bg-slate-600 rounded-full h-2">
                          <motion.div
                            initial={{ width: 0 }}
                            animate={{ width: `${Math.min(progressPercentage, 100)}%` }}
                            transition={{ duration: 0.5 }}
                            className="bg-gradient-to-r from-primary to-emerald-500 h-2 rounded-full"
                          />
                        </div>
                      </div>
                    )}

                    {/* Recompensas e tempo */}
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4 text-sm">
                        <div className="flex items-center space-x-1 text-yellow-600 dark:text-yellow-400">
                          <Star className="w-4 h-4" />
                          <span>+{challenge.points} pts</span>
                        </div>
                        <div className="flex items-center space-x-1 text-purple-600 dark:text-purple-400">
                          <Zap className="w-4 h-4" />
                          <span>+{challenge.xpReward} XP</span>
                        </div>
                        {!challenge.completed && timeRemaining > 0 && (
                          <div className="flex items-center space-x-1 text-slate-500 dark:text-slate-400">
                            <Clock className="w-4 h-4" />
                            <span>{timeRemaining}h restantes</span>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Botão de ação */}
                  <div className="flex items-center space-x-2 ml-4">
                    {challenge.target > 1 && !challenge.completed && (
                      <motion.button
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => onProgressUpdate(challenge.id, 1)}
                        className="flex items-center space-x-1 bg-primary hover:bg-primary-dark text-white px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200"
                      >
                        <Plus className="w-4 h-4" />
                        <span>+1</span>
                      </motion.button>
                    )}
                    
                    <motion.button
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                      onClick={() => !challenge.completed && onCompleteChallenge(challenge.id)}
                      disabled={challenge.completed}
                      className={`w-10 h-10 rounded-full flex items-center justify-center transition-all duration-200 ${
                        challenge.completed
                          ? "bg-green-500 text-white"
                          : "bg-slate-200 dark:bg-slate-600 hover:bg-primary hover:text-white"
                      }`}
                    >
                      {challenge.completed ? (
                        <CheckCircle className="w-6 h-6" />
                      ) : (
                        <Circle className="w-6 h-6" />
                      )}
                    </motion.button>
                  </div>
                </div>
              </motion.div>
            );
          })}
        </AnimatePresence>
      </div>

      {/* Bonus de sequência */}
      {currentStreak > 0 && (
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="mt-6 p-4 bg-gradient-to-r from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20 rounded-lg border border-orange-200 dark:border-orange-800"
        >
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Flame className="w-6 h-6 text-orange-500" />
              <div>
                <div className="font-semibold text-slate-900 dark:text-white">
                  Sequência de {currentStreak} dias! 🔥
                </div>
                <div className="text-sm text-slate-600 dark:text-slate-400">
                  {currentStreak >= 7 ? 'Você está em chamas!' : `Apenas ${7 - currentStreak} dias para a próxima recompensa`}
                </div>
              </div>
            </div>
            {currentStreak >= 7 && (
              <div className="flex items-center space-x-2 text-orange-600 dark:text-orange-400">
                <Gift className="w-5 h-5" />
                <span className="font-medium">Bônus desbloqueado!</span>
              </div>
            )}
          </div>
        </motion.div>
      )}
    </motion.div>
  );
};

export default DailyChallenges;
